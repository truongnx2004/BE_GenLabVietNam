// const Account = require("../models/Account");

// exports.login = async (req, res) => {
//   const { username, password } = req.body;

//   try {
//     const user = await Account.findOne({
//       where: {
//         UserName: username,
//         Password: password, // ‚ö†Ô∏è ph·∫£i ƒë√∫ng c·∫£ hai
//       },
//     });

//     if (!user) {
//       return res.status(401).json({ message: "Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u" });
//     }

//     return res.status(200).json({
//       message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
//       data: {
//         id: user.AccountID,
//         username: user.UserName,
//         role: user.Role,
//       },
//     });
//   } catch (error) {
//     console.error(error);
//     res.status(500).json({ message: "L·ªói ƒëƒÉng nh·∫≠p" });
//   }
// };
const bcrypt = require("bcrypt");
const jwt = require('jsonwebtoken');


const { OAuth2Client } = require("google-auth-library"); // ‚úÖ D√≤ng n√†y b·∫Øt bu·ªôc

const { Op } = require("sequelize");
const Account = require("../models/Account");
const Information = require("../models/Information");
const transporter = require("../utils/mailer");

const login = async (req, res) => {
  const { username, password } = req.body; 

  // üü¢ S·ªê (1): In gi√° tr·ªã ng∆∞·ªùi d√πng nh·∫≠p
  console.log("üëâ ƒêang ki·ªÉm tra t√†i kho·∫£n:", username, password);

  try {
    // üü¢ S·ªê (2): Truy v·∫•n t√†i kho·∫£n t·ª´ database
    const user = await Account.findOne({
      where: {
        [Op.or]: [{ UserName: username }, { Email: username }],
        Password: password,
      },
    });

    // üü¢ S·ªê (3): In k·∫øt qu·∫£ t√¨m ƒë∆∞·ª£c
    console.log("üîç K·∫øt qu·∫£ t√¨m user:", user);

    if (!user) {
      return res.status(401).json({ message: "Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u" });
    }

    // T·∫°o JWT ch·ª©a role
    const token = jwt.sign(
      {
        id: user.AccountID,
            username: user.UserName,
            email: user.Email,
            role: user.Role
      },
      process.env.JWT_SECRET || "your-secret",
      { expiresIn: "1d" }
    );

    return res.status(200).json({
      message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
      user: {
        id: user.AccountID,
        username: user.UserName,
        email: user.Email,
        role: user.Role,
      },
      token
    });
  } catch (err) {
    console.error("‚ùå L·ªói ƒëƒÉng nh·∫≠p:", err);
    res.status(500).json({ message: "L·ªói ƒëƒÉng nh·∫≠p", error: err.message });
  }
};

const client = new OAuth2Client(
  "367898675068-fmj2mrtue07srrmg83hg0v48vg59aqpv.apps.googleusercontent.com"
);

const googleLogin = async (req, res) => {
  const { credential } = req.body;

  try {
    // 1. X√°c th·ª±c credential
    const ticket = await client.verifyIdToken({
      idToken: credential,
      audience:
        "367898675068-fmj2mrtue07srrmg83hg0v48vg59aqpv.apps.googleusercontent.com",
    });

    const payload = ticket.getPayload();
    const email = payload.email;
    const name = payload.name;

    // 2. T√¨m ho·∫∑c t·∫°o t√†i kho·∫£n trong DB
    let user = await Account.findOne({ where: { Email: email } });

    if (!user) {
      user = await Account.create({
        UserName: email.split("@")[0],
        Email: email,
        Password: "", // ƒë·ªÉ tr·ªëng v√¨ d√πng Google
        Role: "Customer",
      });
    }

    // 3. T·∫°o JWT ch·ª©a role
    const token = jwt.sign(
      {
        id: user.AccountID,
        username: user.UserName,
        role: user.Role
      },
      process.env.JWT_SECRET || "your-secret",
      { expiresIn: "1d" }
    );

    res.json({
      message: "ƒêƒÉng nh·∫≠p Google th√†nh c√¥ng",
      token,
      user: {
        id: user.AccountID,
        username: user.UserName,
        email: user.Email,
        role: user.Role,
      },
    });
  } catch (error) {
    console.error("L·ªói Google Login:", error);
    res.status(401).json({ message: "Kh√¥ng th·ªÉ x√°c th·ª±c t√†i kho·∫£n Google." });
  }
};

////////////////////////////////////////////////////////////////////////////////

const otpStore = new Map(); // l∆∞u OTP t·∫°m th·ªùi

const generateId = () => {
  return Date.now(); // ho·∫∑c d√πng logic t·∫°o ID theo chu·∫©n c·ªßa b·∫°n
};

const register = async (req, res) => {
  const {
    username,
    password,
    email,
    role = "Customer",
    name,
    gender,
    dob,
    address,
    phone,
    cccd
  } = req.body;

  try {
    // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i
    const existing = await Account.findOne({ where: { Email: email } });
    if (existing) return res.status(400).json({ message: "Email ƒë√£ t·ªìn t·∫°i!" });

    // T·∫°o ID v√† m√£ h√≥a m·∫≠t kh·∫©u
    const accountId = generateId();
    const plainPassword = password;


    // T·∫°o t√†i kho·∫£n
    await Account.create({
      AccountID: accountId,
      UserName: username,
      Password: plainPassword,
      Email: email,
      Role: role,
      Status: 'on'
    });

    // T·∫°o h·ªì s∆° ng∆∞·ªùi d√πng
    await Information.create({
      InformationID: accountId + 1,
      Name_Information: name,
      Gender: gender,
      Date_Of_Birth: dob,
      Address: address,
      Phone: phone,
      CCCD: cccd,
      AccountID: accountId
    });

    // G·ª≠i email x√°c nh·∫≠n
    await transporter.sendMail({
      from: "GENLAB Vietnam <ngxtruong010204@gmail.com>",
      to: email,
      subject: "ƒêƒÉng k√Ω th√†nh c√¥ng",
      text: `Ch√†o ${name},\n\nB·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n th√†nh c√¥ng t·∫°i GENLAB.\n\nTh√¥ng tin t√†i kho·∫£n:\nT√™n ƒëƒÉng nh·∫≠p: ${username}\nEmail: ${email}\n\nC·∫£m ∆°n b·∫°n!`,
    });

    res.json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ki·ªÉm tra email." });
  } catch (error) {
    console.error("L·ªói ƒëƒÉng k√Ω:", error);
    res.status(500).json({ message: "L·ªói m√°y ch·ªß!" });
  }
};


const resetPassword = async (req, res) => {
  const { email, otp, newPassword } = req.body;
  const validOtp = otpStore.get(email);

  if (!validOtp || otp !== validOtp) {
    return res
      .status(400)
      .json({ message: "OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n." });
  }

  // ‚ùå Kh√¥ng m√£ h√≥a m·∫≠t kh·∫©u (CH·ªà d√πng cho m·ª•c ƒë√≠ch h·ªçc t·∫≠p/demo)
  await Account.update({ Password: newPassword }, { where: { Email: email } });

  otpStore.delete(email);

  res.json({ message: "ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng!" });
};

const sendResetOtp = async (req, res) => {
  const { email } = req.body;

  try {
    const user = await Account.findOne({ where: { Email: email } });
    if (!user) {
      return res.status(404).json({ message: "Email kh√¥ng t·ªìn t·∫°i" });
    }

    const otp = Math.floor(100000 + Math.random() * 900000).toString();
    otpStore.set(email, otp); // L∆∞u OTP t·∫°m th·ªùi

    await transporter.sendMail({
      from: "GENLAB <ngxtruong010204@gmail.com>",
      to: email,
      subject: "M√£ OTP kh√¥i ph·ª•c m·∫≠t kh·∫©u",
      text: `M√£ OTP c·ªßa b·∫°n l√†: ${otp}`,
    });

    res.json({ message: "OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i t·ªõi email c·ªßa b·∫°n." });
  } catch (error) {
    console.error("L·ªói g·ª≠i OTP:", error);
    res.status(500).json({ message: "Kh√¥ng th·ªÉ g·ª≠i OTP" });
  }
};

module.exports = {
  register,
  login,
  googleLogin,
  resetPassword,
  sendResetOtp
};

