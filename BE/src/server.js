require("dotenv").config();
const express = require("express");
const cors = require("cors");
const sequelize = require("./config/database");
const path = require("path");

// Import c√°c routes
const bookingRoute = require("./routes/bookingRoutes");
const authRoutes = require("./routes/authRoutes");
const profileRoutes = require("./routes/profileRoutes");
const managerRoutes = require("./routes/managerRoutes");
const adminRoutes = require("./routes/adminRoutes");
const staffBookingRoutes = require("./routes/staffBookingRoutes"); // ƒê·ªïi t√™n bi·∫øn ƒë·ªÉ tr√°nh tr√πng l·∫∑p
const kitnsample = require("./routes/staffKitNSampleRoutes");
const vnpayRoutes = require("./routes/vnpayRoutes");
const ratingRoutes = require("./routes/ratingRoutes");

// üîå IMPORT SOCKET SERVER
const http = require("http");
const socketServer = require("./socketServer");

const app = express();
const server = http.createServer(app);

// Khai b√°o middleware c∆° b·∫£n
app.use(cors({ origin: "http://localhost:3000" }));
app.use(express.json());

// =================================================================
// S·ª¨A L·ªñI T·∫†I ƒê√ÇY: C·∫•u h√¨nh ph·ª•c v·ª• file tƒ©nh
// ƒê·∫∑t ngay sau c√°c middleware c∆° b·∫£n v√† TR∆Ø·ªöC c√°c API routes
// D√≤ng n√†y b√°o cho Express: "Khi c√≥ y√™u c·∫ßu ƒë·∫øn '/results', h√£y t√¨m file trong th∆∞ m·ª•c 'BE/src/public/results'"
app.use(express.static(path.join(__dirname, "public")));
// =================================================================

//Map
const routeMap = require("./routes/routeMap");

// API Routes
app.use("/api/auth", authRoutes);
app.use("/api/profile", profileRoutes);
app.use("/api/booking", bookingRoute);
app.use("/api/manager", managerRoutes);
app.use("/api/admin", adminRoutes);
app.use("/api/staff", staffBookingRoutes); // S·ª≠ d·ª•ng bi·∫øn ƒë√£ ƒë·ªïi t√™n
app.use("/api/staff", kitnsample);
app.use("/api/route", routeMap);
app.use("/api", vnpayRoutes);
app.use("/api/rating", ratingRoutes);

// Kh·ªüi ƒë·ªông socket server
socketServer(server);

// K·∫øt n·ªëi DB v√† kh·ªüi ƒë·ªông c·∫£ server + socket
sequelize
  .authenticate()
  .then(() => {
    console.log("‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng");
    server.listen(3001, () => {
      console.log("üöÄ Server + Socket.IO ch·∫°y t·∫°i http://localhost:3001");
    });
  })
  .catch((err) => {
    console.error("‚ùå L·ªói k·∫øt n·ªëi:", err);
  });
